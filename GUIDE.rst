
Environment
-----------

There is an ./environment.yml file.

MAINTENANCE: None.

CREATION: It was made by 

    $ conda config --add channels conda-forge
    $ conda create --name quasisplines
    $ conda activate quasisplines
    $ conda env export > environment.yml

(
and can be setup elsewhere with:

    $ conda env create -f environment.yml
)

Version Control
---------------

./ is a Git repository.

MAINTENANCE: Follow
        'Git Tutorial for Beginners: Command-Line Fundamentals' 
by Corey Shafer.

    $ git add -A
    $ git commit -m "informative message"
    $ git push origin master

CREATION: It was created by making a .gitignore file and then entering

    $ git init
    $ git add .
    $ git commit -m "First commit"
    $ git commit -A

(
INSTALLATION: ...

INITIALIZATION:
$ git config --global core.editor "emacs -nw"
$ git config --global user.name "Patrick Clarke" &&
$ git config --global user.email "pattyclarke@gmail.com"

On GITHUB: Make a new repository, then...
$ git remote add origin remote repository URL# Sets the new remote
$ git remote -v

$ git push -u origin master
)
    
Project Structure
-----------------

- Code:
  - ./quasisplines.sage
  - ./qspline_objects.sage
  - ./quasisplines/quasisplines.py
  - ./quasisplines/qspline_objects.py
    
- Data & Serialization:
  - XXX/XXX.json

- Demonstration:
  - ./quasisplines_demo.ipynb

- Installation:
  - ./quasisplines/setup.py (no setup.py in this one)

- Documentation:
  - ./README.rst
  - XXX./docs/index.rst
  - XXX./docs/config.py
  - XXX./docs/_build/html/index.html

- Legal:
  - ./LICENSE

- Version Control:
  - ./.gitignore
    
- Environment:
  - ./environment.yml
  
- Management:
  - ./Makefile
  - ./tests/Makefile
  
- Tests:
  - ./tests/context.py
  - ./tests/test_quasisplines.sage
  - ./tests/test_quasisplines.py


Testing and Profiling
---------------------

PYTEST: With pytest, we can run

    python -m pytest
    or
    pytest

This runs the tests in ./tests/

SAGE TEST: Sages version of doctest can be run by

    sage -t quasisplines.sage
    sage -t qspline_example_data.sage

CPROFILE: The relative import (from ...) in test_quasisplines.py must be deleted, then run 

    python -m cProfile tests/test_quasisplines.py   
    
Documentation
-------------

In addition to ./README.rst, the documentation is generated by Sphinx.

CREATION: Follow

https://medium.com/@eikonomega/getting-started-with-sphinx-autodoc-part-1-2cebbbca5365

This essentially means
   1) running sphinx-quickstart from ./docs
   2) accepting all the default responses except:
      - autodoc: automatically insert docstrings from modules (y/n): y
      - coverage: checks for documentation coverage (y/n) [n]: y
   3) removing comments from the lines
      # import os
      # import sys
      # sys.path.insert(0, os.path.abspath('.'))
   4) and setting
      extensions = ['sphinx.ext.autodoc', 'sphinx.ext.coverage', 'sphinx.ext.napoleon']
   
In addition to this file (./README.rst), the documentation is generated by Sphinx.
From within ./docs run

    make html

This will make a file called ./docs/_build/html/index.html which is the html entry point to the documentation.

MAINTENANCE: Add automodule entries as needed.


Management
----------

For SAGE CODE files, the Makefile allows make to take .sage files in ./ and "preparse" them into .py files in ./quaisplines:

    make preparsed

creates ./quasisplines/quasisplines.py.

There is also a version of 'make preparsed' for SAGE TEST files in the ./tests/ directory.


Demonstration
-------------

The Jupyter Notebook

    jupyter notebook quasisplines_demo.ipynb

contains example code and some data visualizations.

Installation
------------

    python setup.py install --user








